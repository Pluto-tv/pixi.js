{"version":3,"sources":["../../../src/core/text/TextStyle.js"],"names":["defaultStyle","align","breakWords","dropShadow","dropShadowAlpha","dropShadowAngle","Math","PI","dropShadowBlur","dropShadowColor","dropShadowDistance","fill","fillGradientType","LINEAR_VERTICAL","fillGradientStops","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","lineJoin","miterLimit","padding","stroke","strokeThickness","textBaseline","trim","wordWrap","wordWrapWidth","leading","maxLines","continueMark","TextStyle","style","styleID","Object","assign","clone","clonedProperties","key","reset","toFontString","fontSizeString","fontFamilies","Array","isArray","split","i","length","test","join","_align","_breakWords","_dropShadow","_dropShadowAlpha","_dropShadowAngle","_dropShadowBlur","_dropShadowColor","outputColor","getColor","_dropShadowDistance","_fill","_fillGradientType","_fillGradientStops","areArraysEqual","_fontFamily","_fontSize","_fontStyle","_fontVariant","_fontWeight","_letterSpacing","_lineHeight","_leading","_lineJoin","_miterLimit","_padding","_stroke","_strokeThickness","_textBaseline","_trim","_wordWrap","_wordWrapWidth","_maxLines","_continueMark","getSingleColor","color","indexOf","replace","array1","array2"],"mappings":"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","file":"TextStyle.js","sourcesContent":["// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from '../const';\nimport { hex2string } from '../utils';\n\nconst defaultStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n    maxLines: 10000,\n    continueMark: false\n};\n\n/**\n * A TextStyle Object decorates a Text Object. It can be shared between\n * multiple Text objects. Changing the style will update all text objects using it.\n *\n * @class\n * @memberof PIXI\n */\nexport default class TextStyle\n{\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', 800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Default is 'miter' (creates a sharp corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     * @param {number} [style.maxLines=10000] - When wordWrap is true, the maximum number of lines to display\n     * @param {boolean | string} [style.continueMark=false] - When continueMark is true or a string value, the string (or ellipsis) added to a truncated word\n     */\n    constructor(style)\n    {\n        this.styleID = 0;\n\n        Object.assign(this, defaultStyle, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return {PIXI.TextStyle} New cloned TextStyle object\n     */\n    clone()\n    {\n        const clonedProperties = {};\n\n        for (const key in defaultStyle)\n        {\n            clonedProperties[key] = this[key];\n        }\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /**\n     * Resets all properties to the defaults specified in TextStyle.prototype._default\n     */\n    reset()\n    {\n        Object.assign(this, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align()\n    {\n        return this._align;\n    }\n    set align(align) // eslint-disable-line require-jsdoc\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n    get breakWords()\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords) // eslint-disable-line require-jsdoc\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n    get dropShadow()\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAlpha()\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAngle()\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n    get dropShadowBlur()\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n    get dropShadowColor()\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowDistance()\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill()\n    {\n        return this._fill;\n    }\n    set fill(fill) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(fill);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     * See {@link PIXI.TEXT_GRADIENT}\n     *\n     * @member {number}\n     */\n    get fillGradientType()\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType) // eslint-disable-line require-jsdoc\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     *\n     * @member {number[]}\n     */\n    get fillGradientStops()\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops) // eslint-disable-line require-jsdoc\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font family\n     *\n     * @member {string|string[]}\n     */\n    get fontFamily()\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily) // eslint-disable-line require-jsdoc\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     *\n     * @member {number|string}\n     */\n    get fontSize()\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle()\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant()\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight()\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n    get letterSpacing()\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing) // eslint-disable-line require-jsdoc\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n    get lineHeight()\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n    get leading()\n    {\n        return this._leading;\n    }\n    set leading(leading) // eslint-disable-line require-jsdoc\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin()\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n    get miterLimit()\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit) // eslint-disable-line require-jsdoc\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n    get padding()\n    {\n        return this._padding;\n    }\n    set padding(padding) // eslint-disable-line require-jsdoc\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string|number}\n     */\n    get stroke()\n    {\n        return this._stroke;\n    }\n    set stroke(stroke) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n    get strokeThickness()\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness) // eslint-disable-line require-jsdoc\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline()\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline) // eslint-disable-line require-jsdoc\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n    get trim()\n    {\n        return this._trim;\n    }\n    set trim(trim) // eslint-disable-line require-jsdoc\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n    get wordWrap()\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n    get wordWrapWidth()\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * When wordWrap is true, the maximum number of lines to display\n     *\n     * @member {number}\n     */\n    get maxLines()\n    {\n        return this._maxLines;\n    }\n    set maxLines(maxLines) // eslint-disable-line require-jsdoc\n    {\n        if (this._maxLines !== maxLines)\n        {\n            this._maxLines = maxLines;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * When continueMark is true or a string value, the string (or ellipsis) added to a truncated word\n     *\n     * @member {string | boolean}\n     */\n    get continueMark()\n    {\n        return this._continueMark;\n    }\n    set continueMark(continueMark) // eslint-disable-line require-jsdoc\n    {\n        if (this._continueMark !== continueMark)\n        {\n            this._continueMark = continueMark;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    toFontString()\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily))\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            fontFamilies[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${fontFamilies.join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n *\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getSingleColor(color)\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if ( typeof color === 'string' )\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n *\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getColor(color)\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n *\n * @param {Array} array1 First array to compare\n * @param {Array} array2 Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual(array1, array2)\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n"]}